var store = [{
        "title": "HP-CONCORD Paves the Way for Scalable Machine Learning in HPC",
        "excerpt":"Read the article about HP-CONCORD on NERSC Science News  ","categories": [],
        "tags": ["research","news"],
        "url": "/HP-CONCORD/",
        "teaser": null
      },{
        "title": "Central Coast Data Science Partnership",
        "excerpt":"We received an NSF grant to train a new generation of data scientists through Central Coast Data Science Partnership! I feel privileged to be a part of the UCSB Data Science Initiative.   Update (April 2, 2020): UCSB Receives NSF Grant To Train a New Generation of Data Scientists (Daily Nexus)  ","categories": [],
        "tags": ["data science"],
        "url": "/central-coast-data-science-partnership/",
        "teaser": null
      },{
        "title": "HP-CONCORD in FY 2021 Budget Request to Congress",
        "excerpt":"In FY 2021 ASCR budget requests to the Congress, HP-CONCORD appeared as one of the program accomplishments. This is a part of the full budget request made by the Office of Science at Department of Energy   The following is from page 27:      HP-CONCORD Enables Machine Learning in HPC at Unprecedented Scale.  Understanding the interactions between millions of variables such as how a disease may be caused by a subset of the human genes is among the most challenging problems in data-driven science. A powerful machine learning algorithm called CONCORD can identify these relationships however until recently it could only be applied to modest-sized data sets. Researchers from LBNL supported by SciDAC along with their collaborators from Google Brain, University of California Santa Barbara and Carnegie Mellon University developed a high-performance computing version of the algorithm called HP-CONCORD. Using NERSC, they then demonstrated this parallel algorithm on an enormous set of data from the Human Connectome Project, which computed estimates for about 4 billion parameters, and an even larger demonstration problem with over 800 billion parameters. The HP-CONCORD team used functional magnetic resonance imaging data to estimate the underlying conditional dependency structure of the brain and then used the resulting estimate to automatically identify functional regions of the brain. The researchers expect that many other science areas will benefit from HP-CONCORD in the future: In biology it can be used to reconstruct gene regulatory networks, or in environmental sciences it can help in estimating temperature-to-environmental-proxy relationships. HP-CONCORD may also be useful for hypothesis generation in exploratory data analysis to guide further experimental study.    There were a lot of budget cuts, but Computing Research Association reports that ASCR faired reasonably well.                          FY19       FY20       FY21 PBR       $ CHANGE       % CHANGE                       DOE SC Total       $6.59B       $7.00B       $5.84B       -$1.16B       -17%                 ASCR       $936M       $980M       $988M       +$8M       +1.0%                 ARPA-E       $366M       $425M       $0       -$425M       -100%          ","categories": [],
        "tags": ["research","news"],
        "url": "/doe-budget-request-to-congress/",
        "teaser": null
      },{
        "title": "Interactive Tutorial with learnr and Binder",
        "excerpt":"Recently, a colleague pointed out that they would like to host R tutorial created with learnr package for their students. In this post, I describe a way to host the tutorials that is suitable in a workshop-like setting.   Creating Interactive Tutorial with learnr Package   learnr is a package that creates a specialized Shiny apps for interactive tutorials. The difficulty in making use of learnr in practice is that someone needs to host the Shiny apps. Immediate possibilities are      Host them on shinyapps.io. The free tier seems to be limited to 5 applications and 25 active hours per month.   Host them on a central Shiny server the instructor installs. With cloud computing this is possible without a physical machine; however, this option is still time consuming and requires expertise.   Student installs Rstudio and runs the tutorials. This can be hard depending on the audience.   First and second options require instructor’s resource and time, and third option need students to invest time to setup the environment and run the tutorials themselves.   “Hosting” Interactive Tutorial with Binder   Binder is a flexible platform to reproduce a computational environment. You can read more about Binder on The Turing Way (an online book for research computing that I find super useful).   For example, Binder can start a Rstudio session with cloned contents of a GitHub repository, and start a Shiny app for you.                                                  Template Code Repository   You can find two interactive tutorial examples in this learnr template Github repository. You can clone the template repository and start creating your own learnr tutorials that will run on Binder!   Below are the two Binder links from the template repository:      shiny/test1:    shiny/test2:   ","categories": [],
        "tags": ["teaching","jupyter","docker","binder","computing"],
        "url": "/learnr-tutorial/",
        "teaser": null
      },{
        "title": "Repositories for Private Development of Public Course Content",
        "excerpt":"For course material development, some content such as homework solutions need to be kept private (at least temporarily). This note explains how two repositories can be used in concert to simplify private development of public course content.   The material on this page has been adopted and expanded from this posting   Initial setup   Remote Public and Private Repositories   Suppose you have two Github repositories:     Public repo is at https://github.com/username/public-repo.git   Private repo is at https://github.com/username/private-repo.git   The public repo will be open to the students, whereas the private repo will be used for development and testing (shared with TAs etc.)   Local Repository with Public and Private Remotes   Create a local repository and set target repositories   mkdir ~/local-repo &amp;&amp; cd ~/local-repo git init git remote add public https://github.com/username/public-repo.git git remote add private https://github.com/username/private-repo.git   Add first public file in master branch and push to public-repo:   # cd ~/local-repo &amp;&amp; git checkout master  echo \"README\" &gt;&gt; README.md git add README.md git commit -m\"first commit\"  git push public master git push private master  Now, public-repo/master and private-repo/master on Github are identical.   Create a local development branch: private-branch   # cd ~/local-repo &amp;&amp; git checkout master git checkout -b private-branch  echo \"handout\" &gt; homework1-handout.md echo \"solutions\" &gt; homework1-solution.md git add homework1-handout.md homework1-solution.md  git commit -m\"private development\"  git push -u private private-branch  Here private-branch branch syncs with private-repo/private-branch (remote branch name defaults to private-branch)   Publishing content to public repository   Do not merge but checkout relevant files into public-repo/master:   # cd ~/public-repo &amp;&amp; git checkout master  git checkout private-branch homework1-handout.md git add homework1-handout.md git commit -m\"release homework1\" git push  Note the line git checkout private-branch homework1-handout.md overwrites (or creates) homework1-handout.md in public-repo/master.   Using different remote vs. local branch names (Optional)   A local branch (you would like to keep private) can have any name. For example, create a local branch named new-branch to sync with private-repo/private-branch:   # cd ~/public-repo &amp;&amp; git checkout master  git checkout --orphan new-branch git pull private private-branch # make some changes git push private new-branch:private-branch  Any changes in new-branch branch will now push to private-repo/private-branch.   Note: upstream tracking doesn’t seem to stick with ‘-u’.   Setting default push behavior (Optional)   To me, the default behaviors of git pull and git push are strange. I kept on using git push [remote] [branch] above because even setting upstream with -u does not behave as I expect it to.   However, configuring git config push.default upstream seems much more intuitive to me.   Also, forcing checkout seems to simplify the process of cloning private/feature to a new local branch and sets the upstream:   git config push.default upstream --local git checkout -f -b new-branch private/feature echo \"fix problems\" &gt;&gt; homework1-handout.md git add -u git commit -m\"fix homework1-handout\" git push -v  Above will push our local new-branch to private/feature branch.   Duplicating Dual Remote Setup   Clone public repository and add private repository as remote:   git clone https://github.com/username/public-repo.git ~/public-repo cd ~/public-repo  # set local master branch to track public master branch git remote rm origin # to explicitly differentiate public vs private repos git remote add public https://github.com/username/public-repo.git git push -u public master    Sync a local private-branch with private-repo/private-branch:   # cd ~/public-repo &amp;&amp; git checkout master  git checkout --orphan private-branch   git remote add private https://github.com/username/private-repo.git git pull private private-branch  echo \"add solutions\" &gt;&gt; homework1-solution.md git add -u git commit -m\"modify homework 1 solution\"  git push -u private private-branch   Check pushing is setup properly with a dry run: git push -n -v   Adding Branches   If multiple people are working on this repository, multiple branches need to be created. To create additional branches to the private repository, simply create a branch from private-branch:   # cd ~/public-repo &amp;&amp; git checkout private-branch  git checkout -b new-private-branch echo \"newfile\" &gt; newfile.txt git add newfile.txt git commit -m'adding a new file'  git remote add private new-private-branch git push --set-upstream private new-private-branch   ","categories": [],
        "tags": ["teaching","computing","github"],
        "url": "/teaching-repos/",
        "teaser": null
      }]
